#include <iostream>
#include <vector>
#include <limits>

using namespace std;

struct Edge {
    int src, dest, weight;
};

class Graph {
public:
    int V; // Number of vertices
    vector<Edge> edges; // List of edges

    Graph(int vertices) : V(vertices) {}

    void addEdge(int u, int v, int weight) {
        edges.push_back({u, v, weight});
    }

    void bellmanFord(int src) {
        vector<int> dist(V, numeric_limits<int>::max());
        dist[src] = 0; // Distance from source to itself is 0

        // Relax all edges |V| - 1 times
        for (int i = 1; i < V; ++i) {
            for (const auto& edge : edges) {
                if (dist[edge.src] != numeric_limits<int>::max() &&
                    dist[edge.src] + edge.weight < dist[edge.dest]) {
                    dist[edge.dest] = dist[edge.src] + edge.weight;
                }
            }
        }

        // Check for negative-weight cycles
        for (const auto& edge : edges) {
            if (dist[edge.src] != numeric_limits<int>::max() &&
                dist[edge.src] + edge.weight < dist[edge.dest]) {
                cout << "Graph contains negative weight cycle" << endl;
                return;
            }
        }

        // Print distances from the source vertex
        cout << "Vertex Distance from Source:" << endl;
        for (int i = 0; i < V; ++i) {
            cout << i << "\t" << (dist[i] == numeric_limits<int>::max() ? "INF" : to_string(dist[i])) << endl;
        }
    }
};

int main() {
    Graph g(5);
    g.addEdge(0, 1, -1);
    g.addEdge(0, 2, 4);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 2);
    g.addEdge(1, 4, 2);
    g.addEdge(3, 2, 5);
    g.addEdge(3, 1, 1);
    g.addEdge(4, 3, -3);

    g.bellmanFord(0);

    return 0;
}
