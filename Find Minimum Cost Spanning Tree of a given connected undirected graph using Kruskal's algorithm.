#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Edge structure
struct Edge {
    int src, dest, weight;
};

// Disjoint Set Union (DSU) for Union-Find
class DisjointSet {
public:
    vector<int> parent, rank;

    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]); // Path compression
        }
        return parent[u];
    }

    void unionSet(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            // Union by rank
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }
};

// Comparison function for sorting edges
bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}

// Kruskal's algorithm to find the MST
vector<Edge> kruskalMST(int V, vector<Edge>& edges) {
    // Sort edges based on weight
    sort(edges.begin(), edges.end(), compareEdges);

    DisjointSet dsu(V);
    vector<Edge> mst;

    for (const auto& edge : edges) {
        int u = edge.src;
        int v = edge.dest;

        // If including this edge does not cause a cycle
        if (dsu.find(u) != dsu.find(v)) {
            dsu.unionSet(u, v);
            mst.push_back(edge);
        }
    }

    return mst;
}

int main() {
    int V = 4; // Number of vertices
    vector<Edge> edges = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    vector<Edge> mst = kruskalMST(V, edges);

    cout << "Edges in the Minimum Cost Spanning Tree:\n";
    int totalCost = 0;
    for (const auto& edge : mst) {
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << endl;
        totalCost += edge.weight;
    }
    cout << "Total Cost: " << totalCost << endl;

    return 0;
}
